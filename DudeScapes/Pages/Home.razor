@page "/"
@using System.Timers

<PageTitle>DudeScapes services</PageTitle>

<MudGrid Justify="Justify.Center">
	<MudItem lg="12">
		<MudText Typo="Typo.h1" Align="Align.Center">DudeScapes</MudText>
		<MudText Typo="Typo.subtitle2" Align="Align.Center">Let's DudeScape your place</MudText>
	</MudItem>
	<MudItem lg="12">
 		<MudGrid Justify="Justify.Center" Spacing="0">
 			<MudItem lg="6">
 				<MudButton FullWidth="true" Color="Color.Primary" Variant="lawnCareBtnVariant" OnClick="() => {UpdateCaroselWaitTime(0);}">Lawn care</MudButton>
 			</MudItem>
			<MudItem lg="6">
 				<MudButton FullWidth="true" Color="Color.Primary" Variant="pressureWashBtnVariant" OnClick="() => {UpdateCaroselWaitTime(1);}">Pressure washing</MudButton>
 			</MudItem>
  		</MudGrid>
	</MudItem>

	<!--<MudCarousel Style="height:300px" ShowArrows="false" ShowBullets="false" EnableSwipeGesture="true" AutoCycle="true" AutoCycleTime="TimeSpan.FromSeconds(6)" SelectedIndexChanged="(e) => UpdateButtons(e) " TData="object">
	-->
	<!--<h3>@test</h3>-->
	<MudItem lg="12">
		<MudCarousel Style="height:500px" ShowArrows="false" ShowBullets="false" EnableSwipeGesture="true" AutoCycle="true" AutoCycleTime="TimeSpan.FromSeconds(timerForCarosel)" @bind-SelectedIndex:get="selectedIndex" @bind-SelectedIndex:set="UpdateButtons" TData="object">
			<MudCarouselItem Transition="Transition.Slide" Color="Color.Primary">
				<div>
					<MudList>
						@{
							foreach (var item in lawnCareJobs)
							{
								<MudListItem Icon="@Icons.Material.Filled.TripOrigin">@item</MudListItem>
							}
						}
					</MudList>
				</div>
			</MudCarouselItem>
			<MudCarouselItem Transition="Transition.Slide" Color="Color.Primary">
				<div>
					<MudList>
						@{
							foreach (var item in pressureWashJobs)
							{
								<MudListItem Icon="@Icons.Material.Filled.TripOrigin">@item</MudListItem>
							}
						}
					</MudList>
				</div>
			</MudCarouselItem>
		</MudCarousel>
	</MudItem>
	<MudItem lg="12">
		<p>Need a job done? Get in touch:</p>
	</MudItem>
	<MudItem lg="10">
		<MudStack>
			<MudCard>
				<MudCardContent>
					<MudText>What do you want done?</MudText>
					<MudGrid Justify="Justify.FlexStart" Spacing="2">
						<MudItem lg="6">
							<MudSelect T="string" Label="Lawn Care" MultiSelection="true" Text="" @bind-SelectedValues="lawnCareSelectedValues">
								@foreach (var lawnJob in lawnCareJobs)
								{
									<MudSelectItem T="string" Value="@lawnJob">@lawnJob</MudSelectItem>
								}
							</MudSelect>
							@foreach (var item in lawnCareSelectedValues)
							{
								if (item != "select a job")
								{
									<MudChip Color="Color.Primary">@item</MudChip>
								}
							}
						</MudItem>
						<MudItem lg="6">
							<MudSelect T="string" Label="Pressure Washing" MultiSelection="true" Text="" @bind-SelectedValues="pressureWashSelectedValues">
								@foreach (var pressureJob in pressureWashJobs)
								{
									<MudSelectItem T="string" Value="@pressureJob">@pressureJob</MudSelectItem>
								}
							</MudSelect>
							@foreach (var item in pressureWashSelectedValues)
							{
								if (item != "select a job")
								{
									<MudChip Color="Color.Primary">@item</MudChip>
								}
							}
						</MudItem>
					</MudGrid>
					<MudItem lg="10">
						<MudText>When do you want it done?</MudText>
						<MudGrid Justify="Justify.Center" Spacing="2">
							<MudItem lg="3">
								<MudCheckBox Label="I'm not sure" @bind-Value="@imNotSureCheckboxValue"></MudCheckBox>
								@{
									if (imNotSureCheckboxValue)
									{
										<MudText Color="Color.Error">We'll set a date when we reach out to you</MudText>
									}
								}
							</MudItem>
							<MudItem lg="3" >
								<MudDatePicker Label="On or around" @bind-Date="jobInquiryDate" Disabled="@imNotSureCheckboxValue" />
							</MudItem>
						</MudGrid>
					</MudItem>
					<MudItem lg="10">
						<MudText>How can we reach you?</MudText>
						<MudField>
							<MudRadioGroup T="string">
								<MudRadio T="string">Phone</MudRadio>
								<MudRadio T="string">Email</MudRadio>
								<MudRadio T="string">Phone or Email both work</MudRadio>
							</MudRadioGroup>
						</MudField>
					</MudItem>
				</MudCardContent>
			</MudCard>
		</MudStack>
	</MudItem>
	<MudItem lg="10">
		<MudGrid>
			<MudItem lg="2">
				<MudText>Send us a message</MudText>
			</MudItem>
			<MudItem lg="3">
				<MudButton Variant="Variant.Outlined" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">Get DudeScaped</MudButton>
			</MudItem>
		</MudGrid>
	</MudItem>
</MudGrid>

@code{
	private int test = 0;

	int timerForCarosel = 10;
	public int selectedIndex;
	private MudBlazor.Variant lawnCareBtnVariant = Variant.Filled;
	private MudBlazor.Variant pressureWashBtnVariant = Variant.Outlined;
	private IList<string> lawnCareJobs = new List<string>() { "Mowing", "Weedwacking and Trimming", "Pest or Weed Control", "Raking or Leaf Cleanup", "Hedge Trimming" };
	private IList<string> pressureWashJobs = new List<string>() { "House Exterior", "Porch or Deck", "Fenses", "Gutters", "Driveway", "Walkways", "Outdoor Furnature", "Shed or Garage", "Removable Rugs or Car Mats" };
	private IEnumerable<string> lawnCareSelectedValues { get; set; } = new HashSet<string>() { "select a job" };
	private IEnumerable<string> pressureWashSelectedValues { get; set; } = new HashSet<string>() { "select a job" };
	private bool imNotSureCheckboxValue { get; set;} = false;
	DateTime? jobInquiryDate = DateTime.Today;

	void UpdateButtons(int value)
	{
		selectedIndex = value;
		if (value == 0)
		{
			lawnCareBtnVariant = Variant.Filled;
			pressureWashBtnVariant = Variant.Outlined;
		}
		else if (value == 1)
		{
			pressureWashBtnVariant = Variant.Filled;
			lawnCareBtnVariant = Variant.Outlined;
		}
	}

	//When a user clicks a carosel item, they probably want it to stay focused for longer so they can read the contents... 
	void UpdateCaroselWaitTime(int index)
	{
		Timer carocelStandStillTimer = new Timer(20000);
		carocelStandStillTimer.Enabled = true;
		carocelStandStillTimer.Elapsed += OnTimedEvent;
		timerForCarosel = 20;
		UpdateButtons(index);
	}

	private void OnTimedEvent(Object source, ElapsedEventArgs e)
	{
		//set carosel time back to 10..
		timerForCarosel = 10;
	}

	void ChangeLawnCareBtnVariant()
	{
		lawnCareBtnVariant = lawnCareBtnVariant.ToString() == "Filled" ? Variant.Outlined : Variant.Filled;
		pressureWashBtnVariant = pressureWashBtnVariant.ToString() == "Outlined" ? Variant.Filled : Variant.Outlined;

	}
	void ChangePressureWashBtnVariant()
	{
		pressureWashBtnVariant = pressureWashBtnVariant.ToString() == "Outlined" ? Variant.Filled : Variant.Outlined;
		lawnCareBtnVariant = lawnCareBtnVariant.ToString() == "Filled" ? Variant.Outlined : Variant.Filled;

	}
}