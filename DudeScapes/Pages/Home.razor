@page "/"
@using System.Timers

<PageTitle>DudeScapes</PageTitle>

<MudGrid Justify="Justify.Center">
	<MudItem lg="12" xs="12">
		<MudText Style="font-size: calc(2rem + 6vw);" Typo="Typo.h1" Align="Align.Center">DudeScapes</MudText>
		<MudText Typo="Typo.subtitle2" Align="Align.Center">Let's DudeScape your place</MudText>
	</MudItem>
	<MudItem lg="12" xs="12">
		<MudText Typo="Typo.body1" Align="Align.Center">Lawn Care and Pressure Washing Services Near Zephyrhills FL</MudText>
	</MudItem>
	<MudItem lg="12">
 		<MudGrid Justify="Justify.Center" Spacing="0">
 			<MudItem lg="6">
 				<MudButton FullWidth="true" Color="Color.Tertiary" Variant="lawnCareBtnVariant" OnClick="() => {UpdateCaroselWaitTime(0);}">Lawn care</MudButton>
 			</MudItem>
			<MudItem lg="6">
				<MudButton FullWidth="true" Color="Color.Info" Variant="pressureWashBtnVariant" OnClick="() => {UpdateCaroselWaitTime(1);}">Pressure washing</MudButton>
 			</MudItem>
  		</MudGrid>
	</MudItem>
	<!--<h3>@test</h3>-->
	<MudItem lg="12" xs="12">
		<MudCarousel Style="height:500px; width: 100%;" ShowArrows="false" ShowBullets="false" EnableSwipeGesture="true" AutoCycle="true" AutoCycleTime="TimeSpan.FromSeconds(timerForCarosel)" @bind-SelectedIndex:get="selectedIndex" @bind-SelectedIndex:set="UpdateButtons" TData="object">
			<MudCarouselItem Transition="Transition.Slide" Color="Color.Tertiary">
				<div class="d-flex" style="height:100%">
					<MudList>
						@{
							foreach (var item in lawnCareJobs)
							{
								<MudListItem Icon="@Icons.Material.Filled.TripOrigin">@item</MudListItem>
							}
						}
					</MudList>
					<MudImage Class="d-none d-sm-flex" Fluid="true" Style="margin-left: auto;" Src="assets/mowman.jpg"></MudImage>
				</div>
			</MudCarouselItem>
			<MudCarouselItem Transition="Transition.Slide" Color="Color.Info">
				<div class="d-flex" style="height:100%">
					<MudList>
						@{
							foreach (var item in pressureWashJobs)
							{
								<MudListItem Icon="@Icons.Material.Filled.TripOrigin">@item</MudListItem>
							}
						}
					</MudList>
					<MudImage Class="d-none d-sm-flex" Fluid="true" Style="margin-left: auto;" Src="assets/pwashman.jpg"></MudImage>
				</div>
			</MudCarouselItem>
		</MudCarousel>
	</MudItem>
	<MudItem lg="10">
		<div style="text-align: center;">
			<h4>Location:</h4>
			<MudText Typo="Typo.body1" Align="Align.Center">We're located in Zephyrhills Florida</MudText>
		</div>
		<MudGrid Justify="Justify.Center">
			<MudItem>
				<MudImage Fluid="true" Src="assets/zephyrhillsMapWithMarker.png"></MudImage>
			</MudItem>
		</MudGrid>
	</MudItem>
	<MudItem lg="10">
		<div style="text-align: center;">
			<MudText Typo="Typo.body1" Align="Align.Center">Need some work done? Get in touch:</MudText>
		</div>
	</MudItem>
	<MudItem lg="10">
		<div style="width: auto; height: 500px; overflow: hidden;">
			<iframe src="https://docs.google.com/forms/d/e/1FAIpQLSdwnhiehe2L6EJ3izhEfAqA6fBmcdNsIUMElNQtcIB5t7pCAg/viewform?embedded=true" frameborder="0" marginheight="0" marginwidth="0">Loading…</iframe>
		</div>
	</MudItem>
</MudGrid>

@code{
	//private int test = 0;

	int timerForCarosel = 10;
	public int selectedIndex;
	private MudBlazor.Variant lawnCareBtnVariant = Variant.Filled;
	private MudBlazor.Variant pressureWashBtnVariant = Variant.Outlined;
	private IList<string> lawnCareJobs = new List<string>() { "Mowing", "Weedwacking/Trimming", "Bush or Hedge Trimming", "Leaf/Yard Cleanup", "Weed control", "Pest Repellent" };
	private IList<string> pressureWashJobs = new List<string>() { "House or Building Exterior", "Garage or Shed Exterior", "Porch or Deck", "Fense", "Gutters", "Driveway or Walkway", "Concrete Surfacts / Sidewalk", "Outdoor Furnature", "Removable Car Mats or Rugs" };
	private IEnumerable<string> lawnCareSelectedValues { get; set; } = new HashSet<string>() { "select a job" };
	private IEnumerable<string> pressureWashSelectedValues { get; set; } = new HashSet<string>() { "select a job" };
	private bool imNotSureCheckboxValue { get; set;} = false;
	DateTime? jobInquiryDate = DateTime.Today;
	// private ElementReference iFrameRef;

	void UpdateButtons(int value)
	{
		selectedIndex = value;
		if (value == 0)
		{
			lawnCareBtnVariant = Variant.Filled;
			pressureWashBtnVariant = Variant.Outlined;
		}
		else if (value == 1)
		{
			pressureWashBtnVariant = Variant.Filled;
			lawnCareBtnVariant = Variant.Outlined;
		}
	}

	//When a user clicks a carosel item, they probably want it to stay focused for longer so they can read the contents... 
	void UpdateCaroselWaitTime(int index)
	{
		Timer carocelStandStillTimer = new Timer(20000);
		carocelStandStillTimer.Enabled = true;
		carocelStandStillTimer.Elapsed += OnTimedEvent;
		timerForCarosel = 20;
		UpdateButtons(index);
	}

	private void OnTimedEvent(Object source, ElapsedEventArgs e)
	{
		//set carosel time back to 10..
		timerForCarosel = 10;
	}

	//Not using - keeping as an example of ternary expression incase I need a reference in the future. 
	// void ChangeLawnCareBtnVariant()
	// {
	// 	lawnCareBtnVariant = lawnCareBtnVariant.ToString() == "Filled" ? Variant.Outlined : Variant.Filled;
	// 	pressureWashBtnVariant = pressureWashBtnVariant.ToString() == "Outlined" ? Variant.Filled : Variant.Outlined;
	// }
}